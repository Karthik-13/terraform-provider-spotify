package spotify

import (
    "context"
    "log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zmb3/spotify"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/clientcredentials"
)


// Provider returns a *schema.Provider.
func Provider() *schema.Provider {

	// The actual provider
	provider := &schema.Provider{
		Schema: map[string]*schema.Schema{
			"client_id": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.MultiEnvDefaultFunc([]string{
					"SPOTIFY_CLIENT_ID",
				}, nil),
				Description: descriptions["client_id"],
			},

			"client_secret": {
				Type:        schema.TypeString,
				Optional:    true,
				Sensitive:   true,
				DefaultFunc: schema.MultiEnvDefaultFunc([]string{
					"SPOTIFY_CLIENT_SECRET",
				}, nil),
				Description: descriptions["client_secret"],
			},

			"access_token": {
				Type:        schema.TypeString,
				Optional:    true,
				Sensitive:   true,
				DefaultFunc: schema.MultiEnvDefaultFunc([]string{
					"SPOTIFY_ACCESS_TOKEN",
				}, nil),
				Description: descriptions["access_token"],
			},
		},

		// List of Data sources supported by the provider
		DataSourcesMap: map[string]*schema.Resource{
			"spotify_album": dataSourceSpotifyAlbum(),
			"spotify_user": dataSourceSpotifyUser(),
			"spotify_current_user": dataSourceSpotifyCurrentUser(),
			"spotify_pause": dataSourceSpotifyPause(),
			"spotify_play": dataSourceSpotifyPlay(),
			"spotify_player_devices": dataSourceSpotifyPlayerDevices(),

		},

		// List of Resources supported by the provider
		ResourcesMap: map[string]*schema.Resource{
			"spotify_player_volume": resourcePlayerVolume(),
			"spotify_playlist": resourcePlaylist(),
		},
	}
    
	provider.ConfigureContextFunc = func(ctx context.Context, d *schema.ResourceData) (interface{}, diag.Diagnostics) {
		return providerConfigure(ctx, d, provider)
	}

	return provider
}

var descriptions map[string]string

func init() {
	descriptions = map[string]string{
		"client_id": "Client ID generated by the Spoitfy Account. If not set,\n" +
		        "defaults to the environment variable SPOTIFY_CLIENT_ID",
		"client_secret": "Client Secret generated by the Spoitfy Account. If not set,\n" +
		        "defaults to the environment variable SPOTIFY_CLIENT_SECRET",
		"access_token": "Access token from the Spotify Account. Use this when user-related actions are needed. If not set,\n" +
		"defaults to the environment variable SPOTIFY_ACCESS_TOKEN",
	}
}

func providerConfigure(ctx context.Context, d *schema.ResourceData, p *schema.Provider) (interface{}, diag.Diagnostics) {
	var accessToken = d.Get("access_token").(string)
	var token *oauth2.Token
	var err error
	if(accessToken != "") {
		token = &oauth2.Token {
			AccessToken: accessToken,
			TokenType: "Bearer",
		}
	} else {
		config := &clientcredentials.Config{
			ClientID:     d.Get("client_id").(string),
			ClientSecret: d.Get("client_secret").(string),
			TokenURL:     spotify.TokenURL,
			Scopes:       []string {
				spotify.ScopeImageUpload,
				spotify.ScopePlaylistReadPrivate,
				spotify.ScopePlaylistModifyPublic,
				spotify.ScopePlaylistModifyPrivate,
				spotify.ScopePlaylistReadCollaborative,
				spotify.ScopeUserFollowRead,
				spotify.ScopeUserLibraryModify,
				spotify.ScopeUserLibraryRead,
				spotify.ScopeUserReadPrivate,
				spotify.ScopeUserReadEmail,
				spotify.ScopeUserReadCurrentlyPlaying,
				spotify.ScopeUserReadPlaybackState,
				spotify.ScopeUserModifyPlaybackState,
				spotify.ScopeUserReadRecentlyPlayed,
				spotify.ScopeUserTopRead,
				spotify.ScopeStreaming,
			},
		}
	
		token, err = config.Token(context.Background())
		if err != nil {
			log.Fatalf("couldn't get token: %v", err)
		}
	}


    client := spotify.Authenticator{}.NewClient(token)
	return &client, nil
}